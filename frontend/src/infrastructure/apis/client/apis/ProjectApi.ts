/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProjectAddDTO,
  ProjectDTOPagedResponseRequestResponse,
  ProjectDTORequestResponse,
  ProjectMembersDTO,
  ProjectUpdateDTO,
  RequestResponse,
  TaskGetDTOListRequestResponse,
} from '../models';
import {
    ProjectAddDTOFromJSON,
    ProjectAddDTOToJSON,
    ProjectDTOPagedResponseRequestResponseFromJSON,
    ProjectDTOPagedResponseRequestResponseToJSON,
    ProjectDTORequestResponseFromJSON,
    ProjectDTORequestResponseToJSON,
    ProjectMembersDTOFromJSON,
    ProjectMembersDTOToJSON,
    ProjectUpdateDTOFromJSON,
    ProjectUpdateDTOToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
    TaskGetDTOListRequestResponseFromJSON,
    TaskGetDTOListRequestResponseToJSON,
} from '../models';

export interface ApiProjectAddMemberPostRequest {
    projectMembersDTO?: ProjectMembersDTO;
}

export interface ApiProjectAddPostRequest {
    projectAddDTO?: ProjectAddDTO;
}

export interface ApiProjectDeleteMemberDeleteRequest {
    projectMembersDTO?: ProjectMembersDTO;
}

export interface ApiProjectGetProjectProjectIdGetRequest {
    projectId: string;
}

export interface ApiProjectGetProjectTasksProjectIdGetRequest {
    projectId: string;
}

export interface ApiProjectGetProjectsGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiProjectUpdatePutRequest {
    projectUpdateDTO?: ProjectUpdateDTO;
}

/**
 * 
 */
export class ProjectApi extends runtime.BaseAPI {

    /**
     */
    async apiProjectAddMemberPostRaw(requestParameters: ApiProjectAddMemberPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Project/AddMember`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectMembersDTOToJSON(requestParameters.projectMembersDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiProjectAddMemberPost(requestParameters: ApiProjectAddMemberPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiProjectAddMemberPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProjectAddPostRaw(requestParameters: ApiProjectAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Project/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectAddDTOToJSON(requestParameters.projectAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiProjectAddPost(requestParameters: ApiProjectAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiProjectAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProjectDeleteMemberDeleteRaw(requestParameters: ApiProjectDeleteMemberDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Project/DeleteMember`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectMembersDTOToJSON(requestParameters.projectMembersDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiProjectDeleteMemberDelete(requestParameters: ApiProjectDeleteMemberDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiProjectDeleteMemberDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProjectGetProjectProjectIdGetRaw(requestParameters: ApiProjectGetProjectProjectIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectDTORequestResponse>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling apiProjectGetProjectProjectIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Project/GetProject/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiProjectGetProjectProjectIdGet(requestParameters: ApiProjectGetProjectProjectIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectDTORequestResponse> {
        const response = await this.apiProjectGetProjectProjectIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProjectGetProjectTasksProjectIdGetRaw(requestParameters: ApiProjectGetProjectTasksProjectIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskGetDTOListRequestResponse>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling apiProjectGetProjectTasksProjectIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Project/GetProjectTasks/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskGetDTOListRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiProjectGetProjectTasksProjectIdGet(requestParameters: ApiProjectGetProjectTasksProjectIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskGetDTOListRequestResponse> {
        const response = await this.apiProjectGetProjectTasksProjectIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProjectGetProjectsGetRaw(requestParameters: ApiProjectGetProjectsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Project/GetProjects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiProjectGetProjectsGet(requestParameters: ApiProjectGetProjectsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectDTOPagedResponseRequestResponse> {
        const response = await this.apiProjectGetProjectsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProjectUpdatePutRaw(requestParameters: ApiProjectUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Project/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectUpdateDTOToJSON(requestParameters.projectUpdateDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiProjectUpdatePut(requestParameters: ApiProjectUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiProjectUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

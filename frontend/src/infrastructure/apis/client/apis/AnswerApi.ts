/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnswerAddDTO,
  AnswerDTORequestResponse,
  AnswerUpdateDTO,
  RequestResponse,
} from '../models';
import {
    AnswerAddDTOFromJSON,
    AnswerAddDTOToJSON,
    AnswerDTORequestResponseFromJSON,
    AnswerDTORequestResponseToJSON,
    AnswerUpdateDTOFromJSON,
    AnswerUpdateDTOToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models';

export interface ApiAnswerAddPostRequest {
    answerAddDTO?: AnswerAddDTO;
}

export interface ApiAnswerDeleteAnswerIdDeleteRequest {
    answerId: string;
}

export interface ApiAnswerGetAnswerAnswerIdGetRequest {
    answerId: string;
}

export interface ApiAnswerUpdatePutRequest {
    answerUpdateDTO?: AnswerUpdateDTO;
}

/**
 * 
 */
export class AnswerApi extends runtime.BaseAPI {

    /**
     */
    async apiAnswerAddPostRaw(requestParameters: ApiAnswerAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Answer/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnswerAddDTOToJSON(requestParameters.answerAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAnswerAddPost(requestParameters: ApiAnswerAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiAnswerAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAnswerDeleteAnswerIdDeleteRaw(requestParameters: ApiAnswerDeleteAnswerIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.answerId === null || requestParameters.answerId === undefined) {
            throw new runtime.RequiredError('answerId','Required parameter requestParameters.answerId was null or undefined when calling apiAnswerDeleteAnswerIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Answer/Delete/{answerId}`.replace(`{${"answerId"}}`, encodeURIComponent(String(requestParameters.answerId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAnswerDeleteAnswerIdDelete(requestParameters: ApiAnswerDeleteAnswerIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiAnswerDeleteAnswerIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAnswerGetAnswerAnswerIdGetRaw(requestParameters: ApiAnswerGetAnswerAnswerIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnswerDTORequestResponse>> {
        if (requestParameters.answerId === null || requestParameters.answerId === undefined) {
            throw new runtime.RequiredError('answerId','Required parameter requestParameters.answerId was null or undefined when calling apiAnswerGetAnswerAnswerIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Answer/GetAnswer/{answerId}`.replace(`{${"answerId"}}`, encodeURIComponent(String(requestParameters.answerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnswerDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAnswerGetAnswerAnswerIdGet(requestParameters: ApiAnswerGetAnswerAnswerIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnswerDTORequestResponse> {
        const response = await this.apiAnswerGetAnswerAnswerIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAnswerUpdatePutRaw(requestParameters: ApiAnswerUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Answer/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AnswerUpdateDTOToJSON(requestParameters.answerUpdateDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAnswerUpdatePut(requestParameters: ApiAnswerUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiAnswerUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

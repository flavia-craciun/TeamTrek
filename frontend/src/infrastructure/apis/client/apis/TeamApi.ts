/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MemberDTOListRequestResponse,
  RequestResponse,
  TeamAddDTO,
  TeamDTOPagedResponseRequestResponse,
  TeamDTORequestResponse,
  TeamUpdateDTO,
} from '../models';
import {
    MemberDTOListRequestResponseFromJSON,
    MemberDTOListRequestResponseToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
    TeamAddDTOFromJSON,
    TeamAddDTOToJSON,
    TeamDTOPagedResponseRequestResponseFromJSON,
    TeamDTOPagedResponseRequestResponseToJSON,
    TeamDTORequestResponseFromJSON,
    TeamDTORequestResponseToJSON,
    TeamUpdateDTOFromJSON,
    TeamUpdateDTOToJSON,
} from '../models';

export interface ApiTeamAddPostRequest {
    teamAddDTO?: TeamAddDTO;
}

export interface ApiTeamGetTeamMembersTeamIdGetRequest {
    teamId: string;
}

export interface ApiTeamGetTeamTeamIdGetRequest {
    id: string;
    teamId: string;
}

export interface ApiTeamGetTeamsGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiTeamUpdatePutRequest {
    teamUpdateDTO?: TeamUpdateDTO;
}

/**
 * 
 */
export class TeamApi extends runtime.BaseAPI {

    /**
     */
    async apiTeamAddPostRaw(requestParameters: ApiTeamAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Team/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TeamAddDTOToJSON(requestParameters.teamAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTeamAddPost(requestParameters: ApiTeamAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiTeamAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTeamGetTeamMembersTeamIdGetRaw(requestParameters: ApiTeamGetTeamMembersTeamIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemberDTOListRequestResponse>> {
        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling apiTeamGetTeamMembersTeamIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Team/GetTeamMembers/{teamId}`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberDTOListRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTeamGetTeamMembersTeamIdGet(requestParameters: ApiTeamGetTeamMembersTeamIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemberDTOListRequestResponse> {
        const response = await this.apiTeamGetTeamMembersTeamIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTeamGetTeamTeamIdGetRaw(requestParameters: ApiTeamGetTeamTeamIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiTeamGetTeamTeamIdGet.');
        }

        if (requestParameters.teamId === null || requestParameters.teamId === undefined) {
            throw new runtime.RequiredError('teamId','Required parameter requestParameters.teamId was null or undefined when calling apiTeamGetTeamTeamIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Team/GetTeam/{teamId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters.teamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTeamGetTeamTeamIdGet(requestParameters: ApiTeamGetTeamTeamIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamDTORequestResponse> {
        const response = await this.apiTeamGetTeamTeamIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTeamGetTeamsGetRaw(requestParameters: ApiTeamGetTeamsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Team/GetTeams`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTeamGetTeamsGet(requestParameters: ApiTeamGetTeamsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamDTOPagedResponseRequestResponse> {
        const response = await this.apiTeamGetTeamsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTeamUpdatePutRaw(requestParameters: ApiTeamUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Team/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TeamUpdateDTOToJSON(requestParameters.teamUpdateDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTeamUpdatePut(requestParameters: ApiTeamUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiTeamUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

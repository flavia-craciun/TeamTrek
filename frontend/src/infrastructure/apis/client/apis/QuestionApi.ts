/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnswerGetDTOListRequestResponse,
  QuestionAddDTO,
  QuestionDTOPagedResponseRequestResponse,
  QuestionDTORequestResponse,
  QuestionUpdateDTO,
  RequestResponse,
} from '../models';
import {
    AnswerGetDTOListRequestResponseFromJSON,
    AnswerGetDTOListRequestResponseToJSON,
    QuestionAddDTOFromJSON,
    QuestionAddDTOToJSON,
    QuestionDTOPagedResponseRequestResponseFromJSON,
    QuestionDTOPagedResponseRequestResponseToJSON,
    QuestionDTORequestResponseFromJSON,
    QuestionDTORequestResponseToJSON,
    QuestionUpdateDTOFromJSON,
    QuestionUpdateDTOToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models';

export interface ApiQuestionAddPostRequest {
    questionAddDTO?: QuestionAddDTO;
}

export interface ApiQuestionDeleteQuestionIdDeleteRequest {
    questionId: string;
}

export interface ApiQuestionGetQuestionAnswersQuestionIdGetRequest {
    questionId: string;
}

export interface ApiQuestionGetQuestionQuestionIdGetRequest {
    questionId: string;
}

export interface ApiQuestionGetQuestionsGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiQuestionUpdatePutRequest {
    questionUpdateDTO?: QuestionUpdateDTO;
}

/**
 * 
 */
export class QuestionApi extends runtime.BaseAPI {

    /**
     */
    async apiQuestionAddPostRaw(requestParameters: ApiQuestionAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Question/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: QuestionAddDTOToJSON(requestParameters.questionAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiQuestionAddPost(requestParameters: ApiQuestionAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiQuestionAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiQuestionDeleteQuestionIdDeleteRaw(requestParameters: ApiQuestionDeleteQuestionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.questionId === null || requestParameters.questionId === undefined) {
            throw new runtime.RequiredError('questionId','Required parameter requestParameters.questionId was null or undefined when calling apiQuestionDeleteQuestionIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Question/Delete/{questionId}`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters.questionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiQuestionDeleteQuestionIdDelete(requestParameters: ApiQuestionDeleteQuestionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiQuestionDeleteQuestionIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiQuestionGetQuestionAnswersQuestionIdGetRaw(requestParameters: ApiQuestionGetQuestionAnswersQuestionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnswerGetDTOListRequestResponse>> {
        if (requestParameters.questionId === null || requestParameters.questionId === undefined) {
            throw new runtime.RequiredError('questionId','Required parameter requestParameters.questionId was null or undefined when calling apiQuestionGetQuestionAnswersQuestionIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Question/GetQuestionAnswers/{questionId}`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters.questionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnswerGetDTOListRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiQuestionGetQuestionAnswersQuestionIdGet(requestParameters: ApiQuestionGetQuestionAnswersQuestionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnswerGetDTOListRequestResponse> {
        const response = await this.apiQuestionGetQuestionAnswersQuestionIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiQuestionGetQuestionQuestionIdGetRaw(requestParameters: ApiQuestionGetQuestionQuestionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionDTORequestResponse>> {
        if (requestParameters.questionId === null || requestParameters.questionId === undefined) {
            throw new runtime.RequiredError('questionId','Required parameter requestParameters.questionId was null or undefined when calling apiQuestionGetQuestionQuestionIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Question/GetQuestion/{questionId}`.replace(`{${"questionId"}}`, encodeURIComponent(String(requestParameters.questionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiQuestionGetQuestionQuestionIdGet(requestParameters: ApiQuestionGetQuestionQuestionIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionDTORequestResponse> {
        const response = await this.apiQuestionGetQuestionQuestionIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiQuestionGetQuestionsGetRaw(requestParameters: ApiQuestionGetQuestionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Question/GetQuestions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiQuestionGetQuestionsGet(requestParameters: ApiQuestionGetQuestionsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionDTOPagedResponseRequestResponse> {
        const response = await this.apiQuestionGetQuestionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiQuestionUpdatePutRaw(requestParameters: ApiQuestionUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Question/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: QuestionUpdateDTOToJSON(requestParameters.questionUpdateDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiQuestionUpdatePut(requestParameters: ApiQuestionUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiQuestionUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProjectDTO } from './ProjectDTO';
import {
    ProjectDTOFromJSON,
    ProjectDTOFromJSONTyped,
    ProjectDTOToJSON,
} from './ProjectDTO';
import type { TaskStatusEnum } from './TaskStatusEnum';
import {
    TaskStatusEnumFromJSON,
    TaskStatusEnumFromJSONTyped,
    TaskStatusEnumToJSON,
} from './TaskStatusEnum';
import type { UserDTO } from './UserDTO';
import {
    UserDTOFromJSON,
    UserDTOFromJSONTyped,
    UserDTOToJSON,
} from './UserDTO';

/**
 * 
 * @export
 * @interface ProjectTaskDTO
 */
export interface ProjectTaskDTO {
    /**
     * 
     * @type {string}
     * @memberof ProjectTaskDTO
     */
    taskId?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectTaskDTO
     */
    taskName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjectTaskDTO
     */
    description?: string | null;
    /**
     * 
     * @type {TaskStatusEnum}
     * @memberof ProjectTaskDTO
     */
    status?: TaskStatusEnum;
    /**
     * 
     * @type {UserDTO}
     * @memberof ProjectTaskDTO
     */
    assignedToUser?: UserDTO;
    /**
     * 
     * @type {ProjectDTO}
     * @memberof ProjectTaskDTO
     */
    project?: ProjectDTO;
    /**
     * 
     * @type {Date}
     * @memberof ProjectTaskDTO
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ProjectTaskDTO
     */
    updatedAt?: Date;
}

/**
 * Check if a given object implements the ProjectTaskDTO interface.
 */
export function instanceOfProjectTaskDTO(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProjectTaskDTOFromJSON(json: any): ProjectTaskDTO {
    return ProjectTaskDTOFromJSONTyped(json, false);
}

export function ProjectTaskDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectTaskDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'taskId': !exists(json, 'taskId') ? undefined : json['taskId'],
        'taskName': !exists(json, 'taskName') ? undefined : json['taskName'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'status': !exists(json, 'status') ? undefined : TaskStatusEnumFromJSON(json['status']),
        'assignedToUser': !exists(json, 'assignedToUser') ? undefined : UserDTOFromJSON(json['assignedToUser']),
        'project': !exists(json, 'project') ? undefined : ProjectDTOFromJSON(json['project']),
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
    };
}

export function ProjectTaskDTOToJSON(value?: ProjectTaskDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'taskId': value.taskId,
        'taskName': value.taskName,
        'description': value.description,
        'status': TaskStatusEnumToJSON(value.status),
        'assignedToUser': UserDTOToJSON(value.assignedToUser),
        'project': ProjectDTOToJSON(value.project),
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { QuestionDTO } from './QuestionDTO';
import {
    QuestionDTOFromJSON,
    QuestionDTOFromJSONTyped,
    QuestionDTOToJSON,
} from './QuestionDTO';
import type { UserDTO } from './UserDTO';
import {
    UserDTOFromJSON,
    UserDTOFromJSONTyped,
    UserDTOToJSON,
} from './UserDTO';

/**
 * 
 * @export
 * @interface AnswerDTO
 */
export interface AnswerDTO {
    /**
     * 
     * @type {string}
     * @memberof AnswerDTO
     */
    answerId?: string;
    /**
     * 
     * @type {string}
     * @memberof AnswerDTO
     */
    description?: string | null;
    /**
     * 
     * @type {QuestionDTO}
     * @memberof AnswerDTO
     */
    question?: QuestionDTO;
    /**
     * 
     * @type {UserDTO}
     * @memberof AnswerDTO
     */
    respondingUser?: UserDTO;
    /**
     * 
     * @type {Date}
     * @memberof AnswerDTO
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AnswerDTO
     */
    updatedAt?: Date;
}

/**
 * Check if a given object implements the AnswerDTO interface.
 */
export function instanceOfAnswerDTO(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AnswerDTOFromJSON(json: any): AnswerDTO {
    return AnswerDTOFromJSONTyped(json, false);
}

export function AnswerDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): AnswerDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'answerId': !exists(json, 'answerId') ? undefined : json['answerId'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'question': !exists(json, 'question') ? undefined : QuestionDTOFromJSON(json['question']),
        'respondingUser': !exists(json, 'respondingUser') ? undefined : UserDTOFromJSON(json['respondingUser']),
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
    };
}

export function AnswerDTOToJSON(value?: AnswerDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'answerId': value.answerId,
        'description': value.description,
        'question': QuestionDTOToJSON(value.question),
        'respondingUser': UserDTOToJSON(value.respondingUser),
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}


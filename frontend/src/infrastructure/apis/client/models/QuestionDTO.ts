/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UserDTO } from './UserDTO';
import {
    UserDTOFromJSON,
    UserDTOFromJSONTyped,
    UserDTOToJSON,
} from './UserDTO';

/**
 * 
 * @export
 * @interface QuestionDTO
 */
export interface QuestionDTO {
    /**
     * 
     * @type {string}
     * @memberof QuestionDTO
     */
    questionId?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionDTO
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof QuestionDTO
     */
    description?: string | null;
    /**
     * 
     * @type {UserDTO}
     * @memberof QuestionDTO
     */
    askingUser?: UserDTO;
    /**
     * 
     * @type {Date}
     * @memberof QuestionDTO
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof QuestionDTO
     */
    updatedAt?: Date;
}

/**
 * Check if a given object implements the QuestionDTO interface.
 */
export function instanceOfQuestionDTO(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function QuestionDTOFromJSON(json: any): QuestionDTO {
    return QuestionDTOFromJSONTyped(json, false);
}

export function QuestionDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'questionId': !exists(json, 'questionId') ? undefined : json['questionId'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'askingUser': !exists(json, 'askingUser') ? undefined : UserDTOFromJSON(json['askingUser']),
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
    };
}

export function QuestionDTOToJSON(value?: QuestionDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'questionId': value.questionId,
        'title': value.title,
        'description': value.description,
        'askingUser': UserDTOToJSON(value.askingUser),
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}

